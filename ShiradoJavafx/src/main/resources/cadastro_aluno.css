//controllerlogin

package com.example.shiradojavafx;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.stage.Stage;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.Parent;
import java.io.IOException;

public class ControllerLogin {
    @FXML
    private TextField emailField;
    @FXML
    private PasswordField senhaField;

    private Professor professor = new Professor("professor@email.com", "123456");

    @FXML
    void handleLogin(ActionEvent event) {
        String email = emailField.getText();
        String senha = senhaField.getText();

        if (professor.validarLogin(email, senha)) {
            try {
                FXMLLoader loader = new FXMLLoader(getClass().getResource("/cadastro_aluno.fxml"));
                Parent root = loader.load();
                Stage stage = (Stage) emailField.getScene().getWindow();
                stage.setScene(new Scene(root));
                stage.setTitle("Sistema de Cadastro - Cadastrar Alunos");
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            Alert alert = new Alert(AlertType.ERROR);
            alert.setTitle("Erro de Login");
            alert.setHeaderText("Credenciais inválidas");
            alert.setContentText("Email ou senha incorretos. Por favor, tente novamente.");
            alert.showAndWait();
        }
    }
}

//controller cadastro

package com.example.shiradojavafx;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import java.net.URL;
import java.util.ResourceBundle;

public class ControllerCadastro implements Initializable {
    @FXML private TextField nomeField;
    @FXML private TextField emailField;
    @FXML private TextField telefoneField;
    @FXML private TextField raField;
    @FXML private TextField cursoField;
    @FXML private TextField turnoField;
    @FXML private Button enviarButton;
    @FXML private TableView<CadastroDeEstudante> alunoTable;
    @FXML private TableColumn<CadastroDeEstudante, String> colNome;
    @FXML private TableColumn<CadastroDeEstudante, String> colEmail;
    @FXML private TableColumn<CadastroDeEstudante, Integer> colRA;
    @FXML private TableColumn<CadastroDeEstudante, String> colCurso;
    @FXML private TableColumn<CadastroDeEstudante, String> colTurno;

    private ObservableList<CadastroDeEstudante> estudantes = FXCollections.observableArrayList();

    @Override
    public void initialize(URL location, ResourceBundle resources) {

        colNome.setCellValueFactory(new PropertyValueFactory<>("nomeCompleto"));
        colEmail.setCellValueFactory(new PropertyValueFactory<>("email"));
        colRA.setCellValueFactory(new PropertyValueFactory<>("ra"));
        colCurso.setCellValueFactory(new PropertyValueFactory<>("curso"));
        colTurno.setCellValueFactory(new PropertyValueFactory<>("turno"));

        alunoTable.setItems(estudantes);
    }

    @FXML
    void handleEnviar(ActionEvent event) {
        try {

            if (nomeField.getText().trim().length() <= 5) {
                showAlert("Erro", "O nome deve ter mais que 5 caracteres");
                return;
            }

            int ra = Integer.parseInt(raField.getText());
            if (ra <= 0 || ra >= 100) {
                showAlert("Erro", "O RA deve ser maior que 0 e menor que 100");
                return;
            }

            if (cursoField.getText().trim().length() <= 2) {
                showAlert("Erro", "O nome do curso deve ter mais que 2 caracteres");
                return;
            }

            String turno = turnoField.getText().trim();
            if (!turno.equals("Matutino") && !turno.equals("Vespertino") && !turno.equals("Noturno")) {
                showAlert("Erro", "Os turnos disponíveis são: Matutino, Vespertino ou Noturno");
                return;
            }


            CadastroDeEstudante novoEstudante = new CadastroDeEstudante(
                    ra,
                    nomeField.getText().trim(),
                    cursoField.getText().trim(),
                    turno,
                    emailField.getText().trim(),
                    Integer.parseInt(telefoneField.getText())
            );

            estudantes.add(novoEstudante);
            limparCampos();
            showAlert("Sucesso", "Estudante cadastrado com sucesso!");

        } catch (NumberFormatException e) {
            showAlert("Erro", "RA e Telefone devem ser números válidos");
        }
    }

    private void limparCampos() {
        nomeField.clear();
        emailField.clear();
        telefoneField.clear();
        raField.clear();
        cursoField.clear();
        turnoField.clear();
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}

//cadastro_de_aluno.css

/* CSS para a interface de cadastro de aluno com TableView para exibir alunos cadastrados */

.root {
    -fx-font-family: 'Segoe UI', sans-serif;
    -fx-background-color: white;
    -fx-padding: 20;
}

.label-title {
    -fx-font-size: 26px;
    -fx-font-weight: bold;
    -fx-text-fill: #1d5cf2;
    -fx-padding: 10 0 20 0;
}

.label-section {
    -fx-font-size: 16px;
    -fx-font-weight: bold;
    -fx-text-fill: #000000;
}

.text-field {
    -fx-pref-height: 30px;
    -fx-border-color: #000000;
    -fx-border-width: 0 0 2 0;
    -fx-background-color: transparent;
    -fx-font-size: 14px;
}

.button-enviar {
    -fx-background-color: #1d5cf2;
    -fx-text-fill: white;
    -fx-padding: 6 16;
    -fx-background-radius: 15;
    -fx-font-weight: bold;
    -fx-effect: dropshadow(gaussian, rgba(0,0,0,0.2), 4, 0, 0, 2);
}

.cadastro-box {
    -fx-border-color: #1d5cf2;
    -fx-border-radius: 15;
    -fx-background-radius: 15;
    -fx-padding: 20;
    -fx-spacing: 10;
    -fx-background-color: white;
}

.label-lista {
    -fx-font-size: 22px;
    -fx-font-weight: bold;
    -fx-text-fill: #1d5cf2;
    -fx-padding: 20 0 10 0;
}

.table-view {
    -fx-border-color: #1d5cf2;
    -fx-border-radius: 10;
    -fx-background-radius: 10;
    -fx-table-cell-border-color: transparent;
    -fx-padding: 10;
    -fx-background-color: white;
}

.table-column {
    -fx-alignment: CENTER_LEFT;
    -fx-font-size: 14px;
}

.table-row-cell {
    -fx-background-color: white;
    -fx-border-color: transparent;
    -fx-padding: 8 12;
}

.table-row-cell:filled:selected, .table-cell:filled:selected {
    -fx-background-color: #d6e4ff;
}


//login.css

/* Estilo CSS inspirado na imagem de login para JavaFX Scene Builder */
.root {
    -fx-background-color: linear-gradient(to right, white 60%, #0d23c3 40%);
    -fx-font-family: 'Segoe UI', sans-serif;
}

#loginPane {
    -fx-padding: 50;
    -fx-spacing: 20;
}

.label-title {
    -fx-font-size: 20px;
    -fx-font-weight: bold;
    -fx-text-fill: #0d23c3;
    -fx-alignment: center;
}

.text-field, .password-field {
    -fx-border-color: #0d23c3;
    -fx-border-radius: 5;
    -fx-background-radius: 5;
    -fx-padding: 8;
    -fx-font-size: 14px;
}

.button-login {
    -fx-background-color: #0d23c3;
    -fx-text-fill: white;
    -fx-padding: 10 20 10 20;
    -fx-background-radius: 8;
    -fx-font-weight: bold;
    -fx-effect: dropshadow(gaussian, rgba(0,0,0,0.3), 4, 0.0, 0, 2);
}

.check-box {
    -fx-text-fill: #0d23c3;
}

.hyperlink {
    -fx-text-fill: #0d23c3;
    -fx-underline: false;
}

#sideInfoPane {
    -fx-background-color: #0d23c3;
    -fx-padding: 60;
    -fx-text-fill: white;
}

#sideInfoTitle {
    -fx-font-size: 28px;
    -fx-font-weight: bold;
    -fx-text-fill: white;
}

#sideInfoText {
    -fx-font-size: 18px;
    -fx-text-fill: white;
}


//presenca.fxml

<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.CheckBox?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.MenuItem?>
<?import javafx.scene.control.SplitMenuButton?>
<?import javafx.scene.control.TableColumn?>
<?import javafx.scene.control.TableView?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.text.Font?>


<AnchorPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/23.0.1" xmlns:fx="http://javafx.com/fxml/1">
   <children>
      <Label layoutX="37.0" layoutY="23.0" text="Presença">
         <font>
            <Font name="System Bold" size="35.0" />
         </font>
      </Label>
      <CheckBox fx:id="ck_presente" layoutX="219.0" layoutY="76.0" mnemonicParsing="false" selected="true" text="Presente" />
      <CheckBox fx:id="ck_presente" allowIndeterminate="true" layoutX="303.0" layoutY="76.0" mnemonicParsing="false" text="Ausente" />
      <TableView layoutX="37.0" layoutY="106.0" prefHeight="200.0" prefWidth="537.0">
        <columns>
          <TableColumn prefWidth="75.0" text="Ra" />
          <TableColumn prefWidth="75.0" text="Nome" />
            <TableColumn prefWidth="75.0" text="Data" />
            <TableColumn prefWidth="75.0" text="Presença" />
        </columns>
         <columnResizePolicy>
            <TableView fx:constant="CONSTRAINED_RESIZE_POLICY" />
         </columnResizePolicy>
      </TableView>
      <Button layoutX="386.0" layoutY="70.0" mnemonicParsing="false" text="enviar" />
      <SplitMenuButton layoutX="44.0" layoutY="72.0" mnemonicParsing="false" text="Kelvin Tallison Neves">
        <items>
          <MenuItem mnemonicParsing="false" text="Action 1" />
          <MenuItem mnemonicParsing="false" text="Action 2" />
        </items>
      </SplitMenuButton>
   </children>
</AnchorPane>


